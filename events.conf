# Events and Actions are defined here.
# An event is described as a control state (e.g. Load_A is pressed; or "Load_A == 1")
# The event is triggered when its conditions are met. This allows for events to
# trigger on every loop as long as a button is pressed.
# If an event should only trigger when a control changes, the change needs to be part of the event.
#
# possible List of events:
#   * Button state:
#       * pushed, released, toggled
#   * Dial, fader or rotary changed
#   * Dial or fader value in range

# internal representation
#   * Event is eval'd; Result must be true or false
#   * device state is given as three lists:
#       1. Current state
#       2. previous state (last read)
#       3. List with changed controls
#   * Names of the lists:
#       * i (is)     => current control state
#       * w (was)    => previous control state
#       * c (change) => controls that changed from previous loop
#
# Event-examples:
#   * i['Load_A'] == 1 and c['Load_A'] == 1
#       triggers when 'Load_A' is pressed but wasn't before.
#   * c['Vol_A'] == 1
#       triggers when fader 'Vol_A' is changed.

# Actions:
#   Every event has an Action associated with it.
#   An action is currently only
#       "python"    - one or more python commands
#                     Caveats: * each line is executed by itself by a new eval-call.
#                                Thus it's not possible to create loops, for example.
#                                This is subject to change and will be fixed!


# Lines starting with a hash-sign are ignored (considered comments)

# fire if current event contains 'Jog_A', i.e. dial has been turned
?'Jog_A' in c
    !python
    print "event fired: Jog_A: " + str(v['Jog_A'])


# Button 'Sync_A' is pressed => put screen into standby mode (on linux)
?'Sync_A' in c and v['Sync_A'] == 1
    !python
    subprocess.call(["xset", "dpms", "force", "off"])

